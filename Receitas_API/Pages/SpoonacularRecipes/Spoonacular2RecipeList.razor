@page "/recipelist"

@* @using Microsoft.Extensions.Logging
@using RestSharp;
@using Newtonsoft.Json
@using Receitas_API.Data
@using Receitas_API.Models
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.RichTextEditor
@using Receitas_API.Components
 *@

 @using Microsoft.Extensions.Logging
@using System.Net.Http.Json
@using Receitas_API.Data
@using Receitas_API.Models
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.RichTextEditor
@using Receitas_API.Components
@inject ILogger<App> logger;

<a id="top_page"></a>
<h3>Recipes V1</h3>

<hr />
<div id="spinnerContainer"></div>
<SfSpinner @ref="@SpinnerObj"
           Label="Processando..."
           Type="SpinnerType.Bootstrap4"
           CssClass="e-outline-spin">
</SfSpinner>

@if (AlertVisibility)
{
    <AlertMessage Message="Pesquisa não devolveu resultados." MessageType="Enums.AlertMessageType.Info"></AlertMessage>
}

@if (recipesTitles == null)
{
    <LoadingData spinnerMessage="@(string.IsNullOrEmpty(searchMessage)?$"Filtrando dados para região/país '{RegionName}'":searchMessage)" />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-3 dropdown-menu-md-left">
                <p class="h6">Escolha região/país</p><span class="showing"></span>
                <SfDropDownList PopupWidth="250px" PopupHeight="450px" @bind-Value="@RegionName" AllowFiltering="true"
                                CssClass="custom-class e-corner"
                                FilterBarPlaceholder="Filtrar" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                TItem="CuisineRegion" TValue="string" Placeholder="Escolha Tag" DataSource="@RegionsData">
                    <DropDownListEvents TItem="CuisineRegion" TValue="string" ValueChange="onChangeRegion"></DropDownListEvents>
                    <DropDownListFieldSettings Text="RegionName" Value="ID"></DropDownListFieldSettings>
                </SfDropDownList>

            </div>
            <div class="col-3 mt-4 pull-left">
                (<span class="font-weight-bold">@(recipesTitles.results.Count)</span>)
            </div>
        </div>
    </div>
    <hr />

    foreach (var recipesTitles in recipesTitles.results)
    {
        var recipeId = recipesTitles.id; //.Where(p => p.title == RegionName).Select(o => o.id).FirstOrDefault();
        var t = Task.Run(() => GetRecipeInformation(recipeId));
        t.Wait();

        recipeInformation = t.Result; // GetRecipeInformation(recipeId).Result;
        var recipeInstructions = recipeInformation.instructions;
        var recipeSummary = recipeInformation.summary;

        <div class="control-section">
            <div class="row">
                <div class="col-lg-6 col-md-4 content">
                    <SfCard ID="SideCard">
                        <CardImage Image="@recipesTitles.image" TitlePosition="TitlePositions.TopRight"
                                   Title="@recipesTitles.id.ToString()"></CardImage>
                        <CardContent>
                            <ChildContent>
                                <p class="h5">
                                    @recipesTitles.title
                                </p>
                            </ChildContent>
                        </CardContent>

                    </SfCard>
                    <br />
                    <a href="#top_page" class="oi oi-arrow-circle-top"> Go top</a>
                </div>
                <div class="col-lg-6 col-md-6 content">
                    <SfCard ID="DetailCard">
                        <CardHeader>
                            <h5 class="h5">Instruções</h5>
                        </CardHeader>
                        <CardContent>
                            <ChildContent>
                                <div class="text-info">@recipeInstructions</div>
                            </ChildContent>
                        </CardContent>
                        <CardContent>
                            <p class="h5">Sumário</p>
                            <SfRichTextEditor>
                                @recipeSummary
                            </SfRichTextEditor>
                        </CardContent>
                    </SfCard>
                </div>
            </div>
            <hr />
        </div>
    }
}
<div class="col-12 col-sm-6">
    <div class="top-social-info text-right">
        <a href="#"><i class="fab fa-pinterest" aria-hidden="true"></i></a>
        <a href="#"><i class="fab fa-facebook" aria-hidden="true"></i></a>
        <a href="#"><i class="fab fa-twitter" aria-hidden="true"></i></a>
        <a href="#"><i class="fab fa-dribbble" aria-hidden="true"></i></a>
        <a href="#"><i class="fab fa-behance" aria-hidden="true"></i></a>
        <a href="#"><i class="fab fa-linkedin" aria-hidden="true"></i></a>
    </div>
</div>



@code {

    protected SfSpinner SpinnerObj;

    private CountriesCuisines.Root recipesTitles;
    private RecipeInformation.RecipeInfo recipeInformation;
    private string RegionName = "French";
    private string spinnerTarget { get; set; } = "#spinnerContainer";

    protected bool AlertVisibility { get; set; }
    protected string searchMessage;

    private readonly HttpClient httpClient = new HttpClient();


    private readonly List<CuisineRegion> RegionsData = new List<CuisineRegion> {
    new CuisineRegion() { ID= "German", RegionName = "Alemã" },
    new CuisineRegion() { ID= "American", RegionName= "Americana" },
    new CuisineRegion() { ID= "Latin American", RegionName = "América Latina" },
    new CuisineRegion() { ID= "British", RegionName= "Britânica" },
    new CuisineRegion() { ID= "Cajun", RegionName= "Cajun" },
    new CuisineRegion() { ID= "Caribbean", RegionName= "Caraíbas" },
    new CuisineRegion() { ID= "Korean", RegionName = "Coreana" },
    new CuisineRegion() { ID= "Spanish", RegionName = "Espanhola"},
    new CuisineRegion() { ID= "Eastern European", RegionName= "Europa de Leste" },
    new CuisineRegion() { ID= "French", RegionName = "Francesa" },
    new CuisineRegion() { ID= "Greek", RegionName = "Grega"},
    new CuisineRegion() { ID= "Indian", RegionName = "Indiana" },
    new CuisineRegion() { ID= "Irish", RegionName = "Irlandesa"},
    new CuisineRegion() { ID= "Italian", RegionName = "Italiana" },
    new CuisineRegion() { ID= "Japanese", RegionName = "Japonesa" },
    new CuisineRegion() { ID= "Jewish", RegionName = "Judeia" },
    new CuisineRegion() { ID= "Mediterranean", RegionName = "Mediterrânica" },
    new CuisineRegion() { ID= "Mexican", RegionName = "Mexicana" },
    new CuisineRegion() { ID= "Middle Eastern", RegionName = "Médio Oriente"},
    new CuisineRegion() { ID= "Nordic", RegionName = "Nórdica" },
    new CuisineRegion() { ID= "Southern", RegionName = "Sulista"},
    new CuisineRegion() { ID= "Thai", RegionName = "Thai"},
    new CuisineRegion() { ID= "Vietnamese", RegionName= "Vietnamita"}
};

    protected override async Task OnInitializedAsync()
    {
        AlertVisibility = false;
        searchMessage = "";
        await GetRecipeTitles();
    }

    private async Task GetRecipeTitles()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<CountriesCuisines.Root>(
                $"https://api.spoonacular.com/recipes/complexSearch?apiKey=871cc9ddc1ea4733830dd2c30e3d691a&cuisine={RegionName}");

            if (response != null)
            {
                recipesTitles = response;
            }
            else
            {
                recipesTitles = null;
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message);
            recipesTitles = null;
        }
    }

    private async Task<RecipeInformation.RecipeInfo> GetRecipeInformation(int id)
    {
        return await httpClient.GetFromJsonAsync<RecipeInformation.RecipeInfo>(
            $"https://api.spoonacular.com/recipes/{id}/information?apiKey=871cc9ddc1ea4733830dd2c30e3d691a&includeNutrition=false");
    }

    private async void onChangeRegion(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, CuisineRegion> args)
    {
        recipesTitles = null;
        RegionName = args.Value;
        searchMessage = $"Filtrando dados para região/país '{args.ItemData.RegionName}'. Aguarde, p.f.";
        await GetRecipeTitles();
        AlertVisibility = recipesTitles == null;
        StateHasChanged();
    }

    // private async Task GetRecipeTitles()
    // {
    //     try
    //     {
    //         var client = new RestClient();
    //         var request = new RestRequest("https://api.spoonacular.com/recipes/complexSearch", Method.Get);
    //         request.AddParameter("apiKey", "871cc9ddc1ea4733830dd2c30e3d691a");
    //         request.AddParameter("cuisine", RegionName);
    //         request.AddHeader("Accept", "application/json");
    //         //request.AddHeader("content-type", "application/json");
    //         var response = await client.GetAsync<CountriesCuisines.Root>(request);

    //         if (response != null)
    //         {
    //             var recipeId = response.results.Select(o => o.id).FirstOrDefault();
    //             recipeInformation = await GetRecipeInformation(recipeId);
    //             recipesTitles = response;
    //         }
    //         else
    //         {
    //             recipesTitles = null;
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         logger.LogError(ex.Message);
    //         recipesTitles = null;
    //     }
    // }

    // private async Task<RecipeInformation.RecipeInfo> GetRecipeInformation(int Id)
    // {
    //     var client = new RestClient($"https://api.spoonacular.com/");
    //     var request = new RestRequest($"recipes/{Id}/information?includeNutrition=false", Method.Get);
    //     request.AddParameter("apiKey", "871cc9ddc1ea4733830dd2c30e3d691a");
    //     request.AddHeader("Accept", "application/json");
    //     var response = await client.GetAsync<RecipeInformation.RecipeInfo>(request);
    //     return response;
    // }

    // private async void onChangeRegion(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, CuisineRegion> args)
    // {
    //     recipesTitles = null;
    //     RegionName = args.Value;
    //     searchMessage = $"Filtrando dados para região/país '{args.ItemData.RegionName}'. Aguarde, p.f.";
    //     await GetRecipeTitles();
    //     AlertVisibility = recipesTitles == null;
    //     StateHasChanged();
    // }

    private class CuisineRegion
    {
        public string ID { get; set; }
        public string RegionName { get; set; }
    }
}
<style>
    body {
        font-size: medium;
        font-family: Impact, 'Lucida Handwriting', sans-serif;
    }

    .loader {
        border: 16px solid #f3f3f3; /* Light grey */
        border-top: 16px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 120px;
        height: 120px;
        animation: spin 2s linear infinite;
    }

    #SideCard .e-card .e-card-content {
        height: 376px;
        margin: 16px;
        padding-top: 10px;
    }

    #DetailCard .e-card .e-card-content {
        padding-top: 0px;
    }

    /*    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
                stroke: green;
            }
        */
    .e-card > .e-card-image {
        background-repeat: no-repeat;
        width: 100%;
        height: 100%;
        min-height: 350px;
        min-width: 350px;
    }
    /* .row {
                        width: 80%;
                        margin: auto;
                    }*/

    .e-btn {
        margin-left: 4px;
    }

    /*    .e-card .e-card-content {
                        padding-top: 0px;
                        font-size:medium;
                        }
                */


    .header-area .top-header-area .top-social-info a {
        display: inline-block;
        color: #b6b6b6;
        font-size: 13px;
        margin-right: 30px;
    }

    #PageTop {
        display: inline-block;
        background-color: #FF9800;
        width: 50px;
        height: 50px;
        text-align: center;
        border-radius: 4px;
        position: fixed;
        bottom: 30px;
        right: 30px;
        transition: background-color .3s, opacity .5s, visibility .5s;
        opacity: 0;
        visibility: hidden;
        z-index: 1000;
    }

        #PageTop::after {
            content: "\f077";
            font-family: FontAwesome;
            font-weight: normal;
            font-style: normal;
            font-size: 2em;
            line-height: 50px;
            color: #fff;
        }

        #PageTop:hover {
            cursor: pointer;
            background-color: #333;
        }

        #PageTop:active {
            background-color: #555;
        }

        #PageTop.show {
            opacity: 1;
            visibility: visible;
        }

    /* Styles for the content section */

    .content {
        width: 90%;
        margin: 10px auto;
        font-family: 'Merriweather', serif;
        font-size: 17px;
        color: #6c767a;
        line-height: 1.9;
    }

    .e-spinner-pane .e-spinner-inner .e-spin-bootstrap4 {
        stroke: green;
    }
</style>

